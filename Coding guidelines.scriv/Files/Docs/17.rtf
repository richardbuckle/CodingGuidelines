{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fswiss\fcharset0 Optima-Regular;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\b\fs32 \cf0 Be judicious about singletons\
\

\fs28 Guideline:
\fs32 \

\b0\fs24 Think very carefully before using the singleton design pattern. Prefer dependency injection.\
\

\b\fs28 Bad:
\fs32 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f1\b0\fs22 \cf0 	- (void)someMethod \{\
	    FooManager *fooManager = [FooManager sharedInstance];\
	    // do something with fooManager ...\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs24 \cf0 \

\b\fs28 Good:
\fs32 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f1\b0\fs22 \cf0 	- (void)someMethodWithFooManager:(FooManager *)fooManager \{\
   // do something with fooManager ...\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs24 \cf0 \

\b\fs28 Rationale:
\fs32 \

\b0\fs24 The singleton design pattern is often more of an anti-pattern. Singletons are just globals in disguise. They introduce hidden coupling between modules, make the writing of test cases and mock objects significantly harder, and generally make the code base more brittle and harder to maintain.\
\

\b\fs28 Permitted Exceptions:
\fs32 \

\b0\fs24 Only as agreed with the lead developer. And you'd better make a bloody good case.\
}