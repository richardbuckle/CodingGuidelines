{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fswiss\fcharset0 Optima-Regular;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\b\fs32 \cf0 No Hungarian naming\
\

\fs28 Guideline:
\fs32 \

\b0\fs24 Do not use hungarian naming to encode the type of a variable or whether it is an objective-C property or instance variable in its name.
\f1 \

\f0 \

\b\fs28 Rationale:
\fs32 \

\b0\fs24 Quite apart from the unnecessary cognitive burden it adds to reading code, and the bad fit with a dynamically-typed language, to quote "{\field{\*\fldinst{HYPERLINK "http://thc.org/root/phun/unmaintain.html"}}{\fldrslt How to Write Unmaintanable Code}}":\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\pardirnatural
\cf0 Hungarian Notation is the tactical nuclear weapon of source code obfuscation techniques... Due to the sheer volume of source code contaminated by this idiom nothing can kill a maintenance engineer faster than a well planned Hungarian Notation attack.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural
\cf0 \

\b\fs28 Permitted Exceptions:
\fs32 \

\b0\fs24 The usual Objective-C convention of prefixing reusable classes, and class extension methods, with a unique prefix.\
\
}